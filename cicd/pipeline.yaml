apiVersion: v1
kind: ServiceAccount
metadata:
  name: pipeline-sa
secrets:
  - name: regcred
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: git-repo
spec:
  type: git
  params:
    - name: revision
      value: master
    - name: url
      value: https://github.com/cmwylie19/task-mongo
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: docker-repo
spec:
  type: image
  params:
    - name: url
      value: docker.io/cmwylie19/task-service-dev
---
apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  name: create-ingress-run
  namespace: tekton-pipelines
spec:
  taskRef:
    name: create-ingress
  params:
  - name: CreateCertificate
    value: "true"
  - name: CertificateKeyPassphrase
    value: asecretphrase
  - name: CertificateSecretName
    value: ingresssecret
  - name: ExternalDomain
    value: tekton-pipelines.iancoffey.com
  - name: Service
    value: tekton-pipelines
  - name: ServicePort
    value: "8080"
  timeout: 1000s
  serviceAccountName: tekton-triggers-createwebhook
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-webhook
spec:
  volumes:
  - name: github-secret
    secret:
      secretName: $(params.GitHubSecretName)

  params:
  - name: ExternalDomain
    description: "The external domain for the EventListener e.g. `$(params.EventListenerName).<PROXYIP>.nip.io`"
  - name: GitHubUser
    description: "The GitHub user"
  - name: GitHubRepo
    description: "The GitHub repo where the webhook will be created"
  - name: GitHubOrg
    description: "The GitHub organization where the webhook will be created"
  - name: GitHubSecretName
    description: "The Secret name for GitHub access token. This is always mounted and must exist"
  - name: GitHubAccessTokenKey
    description: "The GitHub access token key name"
  - name: GitHubSecretStringKey
    description: "The GitHub secret string key name"
  - name: GitHubDomain
    description: "The GitHub domain. Override for GitHub Enterprise"
    default: "github.com"
  - name: WebhookEvents
    description: "List of events the webhook will send notifications for"
    default: '[\"push\",\"pull_request\"]'
  steps:
  - name: create-webhook
    image: pstauffer/curl:latest
    volumeMounts:
    - name: github-secret
      mountPath: /var/secret
    command:
    - sh
    args:
    - -ce
    - |
      set -e
      echo "Create Webhook"
      if [ $(params.GitHubDomain) = "github.com" ];then
        curl -v -d "{\"name\": \"web\",\"active\": true,\"events\": $(params.WebhookEvents),\"config\": {\"url\": \"https://$(params.ExternalDomain)\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(params.GitHubSecretStringKey))\"}}" -X POST -u $(params.GitHubUser):$(cat /var/secret/$(params.GitHubAccessTokenKey)) -L https://api.github.com/repos/$(params.GitHubOrg)/$(params.GitHubRepo)/hooks
      else
        curl -d "{\"name\": \"web\",\"active\": true,\"events\": $(params.WebhookEvents),\"config\": {\"url\": \"https://$(params.ExternalDomain)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(params.GitHubSecretStringKey))\"}}" -X POST -u $(params.GitHubUser):$(cat /var/secret/$(params.GitHubAccessTokenKey)) -L https://$(params.GitHubDomain)/api/v3/repos/$(params.GitHubOrg)/$(params.GitHubRepo)/hooks
      fi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-image
spec:
  params:
    - name: pathToDockerFile
      type: string
      default: /Dockerfile
    - name: pathToContext
      type: string
      default: "."
  resources:
    inputs:
      - name: docker-source
        type: git
        targetPath: /
    outputs:
      - name: buildImage
        type: image
  steps:
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:v0.16.0
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(params.pathToDockerFile)
        - --destination=$(resources.outputs.buildImage.url)
        - --context=$(params.pathToContext) 
        - --insecure
        - --skip-tls-verify
        - --skip-tls-verify-pull
        - --insecure-pull   
---
apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  name: create-ingress-run
  namespace: tekton-pipelines
spec:
  taskRef:
    name: create-ingress
  params:
  - name: CreateCertificate
    value: "true"
  - name: CertificateKeyPassphrase
    value: asecretphrase
  - name: CertificateSecretName
    value: ingresssecret
  - name: ExternalDomain
    value: tekton-pipelines.iancoffey.com
  - name: Service
    value: tekton-pipelines
  - name: ServicePort
    value: "8080"
  timeout: 1000s
  serviceAccountName: tekton-triggers-createwebhook
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: dev
spec:
  resources:
    - name: docker-source
      type: git
    - name: buildImage
      type: image
    - name: docker-repo
      type: image
  tasks:
    - name: build-image
      taskRef:
        name: build-image
      params:
        - name: pathToDockerFile
          value: /Dockerfile
        - name: pathToContext
          value: "."
      resources:
        inputs:
          - name: docker-source
            resource: docker-source
        outputs:
          - name: buildImage
            resource: docker-repo
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineRun
metadata:
  name: pipeline-run
spec:
  serviceAccountName: pipeline-sa
  pipelineRef:
    name: pipeline-dev
  resources:
  - name: docker-repo
    resourceRef:
      name: docker-repo
  - name: docker-source
    resourceRef:
      name: git-repo
  - name: buildImage
    resourceRef:
      name: docker-repo
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  labels:
    app: tekton-app
    tekton.dev/pipeline: dev
  name: dev-run
  namespace: tekton-pipelines
spec:
  pipelineRef:
    name: dev
  resources:
  - name: docker-source
    resourceRef:
      name: git-repo
  - name: buildImage
    resourceRef:
      name: docker-repo
  - name: docker-repo
    resourceRef:
      name: docker-repo
  serviceAccountName: pipeline-sa
  timeout: 1h0m0s
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-createwebhook
  namespace: tekton-pipelines
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - create
  - update
  - delete
- apiGroups:
  - triggers.tekton.dev
  resources:
  - eventlisteners
  verbs:
  - get
  - list
  - create
  - update
  - delete
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - create
  - get
  - list
  - delete
  - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-triggers-createwebhook
  namespace: tekton-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-triggers-createwebhook
  namespace: tekton-pipelines
subjects:
  - kind: ServiceAccount
    name: tekton-triggers-createwebhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-triggers-createwebhook
